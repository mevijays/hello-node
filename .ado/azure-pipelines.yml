trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '18'
  dockerRegistryServiceConnection: 'dockerHub'
  imageRepository: '$(DOCKER_HUB_USERNAME)/greeting-app'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Test
  displayName: 'Test Application'
  jobs:
  - job: Test
    displayName: 'Run Tests'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm test
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        mergeTestResults: true
        testRunTitle: 'Node.js Tests'
      condition: succeededOrFailed()
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
      displayName: 'Publish code coverage'
      condition: succeededOrFailed()

- stage: Build
  displayName: 'Build and Push Docker Image'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: 'Build and Push Docker image'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'dkrio'
        repository: '$(imageRepository)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          latest
          $(tag)
      displayName: 'Build and push Docker image'